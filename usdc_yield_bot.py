import os
import asyncio
import json
from typing import List, Dict, Any, Optional
from dataclasses import dataclass

import aiohttp
from dotenv import load_dotenv
from pydantic import BaseModel, Field, ValidationError

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes

# –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã
from providers import PROVIDERS

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ENABLED_PROVIDERS = [p.strip() for p in (os.getenv("ENABLED_PROVIDERS") or "defillama").split(",") if p.strip()]
ALERT_CHECK_MINUTES = int(os.getenv("ALERT_CHECK_MINUTES") or "10")
DEFAULT_TOP_N = int(os.getenv("DEFAULT_TOP_N") or "15")

STATE_FILE = "state.json"

@dataclass
class AlertConfig:
    threshold: float  # APY %
    enabled: bool = True

class RateItem(BaseModel):
    platform: str
    chain: str
    symbol: str
    apy: float = Field(ge=-1000, le=100000)
    tvl_usd: float = 0
    source_url: str
    source: str
    notes: str = ""

class State(BaseModel):
    alert: Optional[AlertConfig] = None

def load_state() -> State:
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            if "alert" in data and data["alert"] is not None:
                data["alert"] = AlertConfig(**data["alert"])
            return State(**data)
        except Exception:
            pass
    return State(alert=None)

def save_state(st: State):
    data = st.model_dump()
    if isinstance(data.get("alert"), AlertConfig):
        data["alert"] = data["alert"].__dict__
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def fetch_all_providers(session: aiohttp.ClientSession) -> List[RateItem]:
    items: List[RateItem] = []
    for key in ENABLED_PROVIDERS:
        provider_cls = PROVIDERS.get(key)
        if not provider_cls:
            continue
        prov = provider_cls()
        try:
            raw = await prov.fetch(session)
            for r in raw:
                try:
                    items.append(RateItem(**r))
                except ValidationError:
                    continue
        except Exception as e:
            # –ª–æ–≥–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
            print(f"[provider:{key}] error: {e}")
    # –¥–µ–¥—É–ø –ø–æ (platform, chain, source_url)
    seen = set()
    uniq = []
    for it in items:
        k = (it.platform, it.chain, it.source_url)
        if k in seen:
            continue
        seen.add(k)
        uniq.append(it)
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ apy
    uniq.sort(key=lambda x: x.apy, reverse=True)
    return uniq

def fmt_row(i: int, it: RateItem) -> str:
    tvl = f"${it.tvl_usd:,.0f}"
    platform = f"{it.platform} ({it.chain})" if it.chain else it.platform
    return f"{i:>2}. <b>{platform}</b> ‚Äî <b>{it.apy:.2f}%</b> APY  |  TVL: {tvl}\n{it.source_url}"

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–∞–∑—ã–≤–∞—é –ª—É—á—à–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ <b>USDC</b>.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /rates [N] ‚Äî —Ç–æ–ø N —Å—Ç–∞–≤–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15)\n"
        "‚Ä¢ /alert set &lt;–ø–æ—Ä–æ–≥&gt; ‚Äî –∞–ª—ë—Ä—Ç –ø—Ä–∏ APY ‚â• –ø–æ—Ä–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä <code>/alert set 12</code>)\n"
        "‚Ä¢ /alert off ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–ª—ë—Ä—Ç—ã\n"
        "‚Ä¢ /sources ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫–∏/–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã\n"
    )
    await update.message.reply_text(text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

async def cmd_sources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    enabled = ", ".join(ENABLED_PROVIDERS) or "‚Äî"
    await update.message.reply_text(
        f"–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: <b>{enabled}</b>\n"
        "–û—Å–Ω–æ–≤–Ω–æ–π: DefiLlama (DeFi –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏). –î–ª—è CEX –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–∞–ø—Ç–µ—Ä—ã (Binance/OKX/Bybit).",
        parse_mode=ParseMode.HTML
    )

async def cmd_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top_n = DEFAULT_TOP_N
    if context.args:
        try:
            top_n = max(1, min(50, int(context.args[0])))
        except Exception:
            pass
    await update.message.reply_text("–°–æ–±–∏—Ä–∞—é —Å—Ç–∞–≤–∫–∏‚Ä¶")
    async with aiohttp.ClientSession() as session:
        items = await fetch_all_providers(session)
    if not items:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    rows = [fmt_row(i+1, it) for i, it in enumerate(items[:top_n])]
    chunks: List[str] = []
    buf = ""
    for row in rows:
        if len(buf) + len(row) > 3500:
            chunks.append(buf)
            buf = ""
        buf += row + "\n\n"
    if buf:
        chunks.append(buf)
    for ch in chunks:
        await update.message.reply_text(ch, parse_mode=ParseMode.HTML, disable_web_page_preview=False)

async def cmd_alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = load_state()
    if not context.args:
        if st.alert and st.alert.enabled:
            await update.message.reply_text(f"–ê–ª—ë—Ä—Ç –≤–∫–ª—é—á—ë–Ω: APY ‚â• {st.alert.threshold}%")
        else:
            await update.message.reply_text("–ê–ª—ë—Ä—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã. –í–∫–ª—é—á–∏—Ç—å: /alert set 12")
        return
    sub = context.args[0].lower()
    if sub == "off":
        st.alert = None
        save_state(st)
        await update.message.reply_text("–ê–ª—ë—Ä—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        return
    if sub == "set":
        if len(context.args) < 2:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /alert set <–ø–æ—Ä–æ–≥>, –ø—Ä–∏–º–µ—Ä: /alert set 12")
            return
        try:
            thr = float(context.args[1])
        except Exception:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä–æ–≥. –ü—Ä–∏–º–µ—Ä: /alert set 10.5")
            return
        st.alert = AlertConfig(threshold=thr, enabled=True)
        save_state(st)
        await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –ê–ª—ë—Ä—Ç –ø—Ä–∏ APY ‚â• {thr}%. –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–∂–¥—ã–µ {ALERT_CHECK_MINUTES} –º–∏–Ω.")
        return
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /alert set <–ø–æ—Ä–æ–≥> | /alert off")

async def alert_worker(app: Application):
    chat_ids = set()  # –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç, –≥–¥–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ /alert
    # –ë–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ: —Ö—Ä–∞–Ω–∏—Ç—å chat_id –≤ state.json
    while True:
        await asyncio.sleep(ALERT_CHECK_MINUTES * 60)
        st = load_state()
        if not st.alert or not st.alert.enabled:
            continue
        try:
            async with aiohttp.ClientSession() as session:
                items = await fetch_all_providers(session)
            best = items[0] if items else None
            if best and best.apy >= st.alert.threshold:
                msg = (
                    f"üö® –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ –ø–æ USDC ‚â• {st.alert.threshold}%\n\n"
                    f"{fmt_row(1, best)}"
                )
                for cid in list(chat_ids):
                    try:
                        await app.bot.send_message(cid, msg, parse_mode=ParseMode.HTML, disable_web_page_preview=False)
                    except Exception as e:
                        print("alert send error:", e)
        except Exception as e:
            print("alert worker error:", e)

async def track_chat(update: Update, _: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º chat_id, –æ—Ç–∫—É–¥–∞ –∑–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∞–ª—ë—Ä—Ç—ã
    app: Application = _.application
    if not hasattr(app, "alert_chats"):
        app.alert_chats = set()
    app.alert_chats.add(update.effective_chat.id)

def main():
    if not TELEGRAM_BOT_TOKEN:
        raise SystemExit("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("sources", cmd_sources))
    app.add_handler(CommandHandler("rates", cmd_rates))
    app.add_handler(CommandHandler("alert", cmd_alert))

    # –æ–±—â–∏–π —Ç—Ä–µ–∫–µ—Ä —á–∞—Ç–æ–≤
    for h in app.handlers.get(0, []):
        pass
    app.add_handler(CommandHandler(["start","rates","alert","sources"], track_chat))

    # —Ñ–æ–Ω–æ–≤–æ–π –≤–æ—Ä–∫–µ—Ä —Å –∞–ª—ë—Ä—Ç–∞–º–∏
    app.post_init = lambda _: asyncio.create_task(alert_worker(app))

    print("Bot is running‚Ä¶")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
